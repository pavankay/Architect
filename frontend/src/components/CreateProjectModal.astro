---
---

<div id="create-modal" class="modal" style="display: none;">
  <div class="modal-content animate-scale-in">
    <div class="modal-header">
      <div>
        <h2 class="font-mono text-3xl mb-2">Create New Project</h2>
        <p class="font-mono text-sm opacity-60 mb-6">Let AI help you architect the perfect solution</p>
      </div>
      <button 
        id="close-modal-btn"
        type="button"
        class="text-white/60 hover:text-white text-2xl font-mono leading-none transition-colors"
      >
        ×
      </button>
    </div>
    
    <form id="create-form" class="space-y-8 flex-1 overflow-y-auto">
      <div class="form-group">
        <label for="name" class="form-label">Project Name</label>
        <input
          type="text"
          id="name"
          name="name"
          required
          class="form-input"
          placeholder="My Awesome Site"
        />
      </div>
      
      <div class="form-group">
        <label for="description" class="form-label">
          Detailed Project Description
          <span class="form-hint">(Be specific for better results)</span>
        </label>
        <textarea
          id="description"
          name="description"
          required
          rows="8"
          class="form-textarea"
          placeholder="Provide a comprehensive description of your project:

• What type of website/app is this? (e.g., e-commerce, blog, SaaS, portfolio)
• Who is your target audience?
• What are the main features and functionality?
• What problems does it solve?
• Any specific technical requirements?
• Design preferences or examples?

The more detail you provide, the better the AI can plan your architecture."
        ></textarea>
      </div>
      
      
      <div class="flex gap-4 mt-8">
        <button
          type="submit"
          class="flex-1 bg-white text-black py-4 font-mono transition-opacity rounded-lg font-medium"
        >
          Create Project
        </button>
        <button
          type="button"
          id="cancel-btn"
          class="flex-1 border border-white/30 py-4 font-mono transition-colors rounded-lg"
        >
          Cancel
        </button>
      </div>
    </form>
    
    <div id="loading-state" class="hidden flex flex-col h-full">
      <div class="space-y-3 mb-6">
        <div class="step-item" data-step="1">
          <div class="flex items-center gap-3">
            <div class="step-icon">
              <div class="spinner"></div>
              <div class="checkmark">●</div>
            </div>
            <span class="font-mono text-xs">Planning site structure...</span>
          </div>
        </div>
        <div class="step-item" data-step="2">
          <div class="flex items-center gap-3">
            <div class="step-icon">
              <div class="spinner"></div>
              <div class="checkmark">●</div>
            </div>
            <span class="font-mono text-xs">Creating site maps...</span>
          </div>
        </div>
        <div class="step-item" data-step="3">
          <div class="flex items-center gap-3">
            <div class="step-icon">
              <div class="spinner"></div>
              <div class="checkmark">●</div>
            </div>
            <span class="font-mono text-xs">Designing architecture diagrams...</span>
          </div>
        </div>
        <div class="step-item" data-step="4">
          <div class="flex items-center gap-3">
            <div class="step-icon">
              <div class="spinner"></div>
              <div class="checkmark">●</div>
            </div>
            <span class="font-mono text-xs">Finalizing project structure...</span>
          </div>
        </div>
      </div>
      
      <div class="flex-1 overflow-hidden">
        <div class="border border-white/10 rounded-lg p-4 h-full overflow-y-auto">
          <h4 class="font-mono text-xs text-white/60 mb-3">AI Progress</h4>
          <div id="ai-callbacks" class="space-y-2 font-mono text-xs text-white/80">
            <!-- AI messages will be dynamically added here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content {
    background-color: #000000;
    padding: 3rem;
    max-width: 800px;
    width: 90%;
    height: 80vh;
    max-height: 600px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .step-icon {
    position: relative;
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }

  .spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--color-white);
    border-top-color: transparent;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    position: absolute;
    top: 0;
    left: 0;
  }

  .step-item {
    opacity: 0.3;
    transition: opacity 0.3s ease;
  }

  .step-item.active {
    opacity: 1;
  }
  
  .step-item.completed {
    opacity: 1;
  }
  
  .step-item.completed .spinner {
    display: none;
  }
  
  .step-item .checkmark {
    color: transparent;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .step-item.completed .checkmark {
    color: transparent;
  }
  
  .step-item.completed .checkmark::before {
    content: '';
    width: 12px;
    height: 12px;
    background-color: #22c55e;
    border-radius: 50%;
    box-shadow: 0 0 8px rgba(34, 197, 94, 0.6);
    position: absolute;
  }

  /* Enhanced form styles */
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding-bottom: 1.5rem;
    margin-bottom: 2rem;
  }

  .form-group {
    position: relative;
  }

  .form-label {
    display: block;
    font-family: 'TG Frekuent Mono', monospace;
    font-size: 0.875rem;
    margin-bottom: 0.75rem;
    color: rgba(255, 255, 255, 0.9);
    font-weight: 500;
  }

  .form-hint {
    font-size: 0.75rem;
    opacity: 0.6;
    margin-left: 0.5rem;
    font-weight: 400;
  }

  .form-input, .form-textarea {
    width: 100%;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.02);
    color: white;
    font-family: 'TG Frekuent Mono', monospace;
    font-size: 0.875rem;
    border-radius: 0.75rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    outline: none;
  }

  .form-input:focus, .form-textarea:focus {
    border-color: rgba(255, 255, 255, 0.6);
    background: rgba(255, 255, 255, 0.05);
    transform: translateY(-1px);
  }

  .form-textarea {
    resize: none;
    line-height: 1.6;
  }

  .form-input::placeholder, .form-textarea::placeholder {
    color: rgba(255, 255, 255, 0.4);
  }
</style>

<script>
  const modal = document.getElementById('create-modal');
  const form = document.getElementById('create-form') as HTMLFormElement;
  const loadingState = document.getElementById('loading-state');
  const cancelBtn = document.getElementById('cancel-btn');
  const closeModalBtn = document.getElementById('close-modal-btn');
  
  // Show modal when create button is clicked
  document.addEventListener('click', (e) => {
    if ((e.target as HTMLElement).id === 'create-project-btn') {
      modal!.style.display = 'flex';
    }
  });
  
  // Hide modal
  const hideModal = () => {
    modal!.style.display = 'none';
  };
  
  cancelBtn?.addEventListener('click', hideModal);
  closeModalBtn?.addEventListener('click', hideModal);
  
  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      description: formData.get('description')
    };
    
    // Show loading state
    form.classList.add('hidden');
    loadingState?.classList.remove('hidden');
    
    // AI callback messages container
    const aiCallbacks = document.getElementById('ai-callbacks');
    
    // Connect to WebSocket for real-time updates
    const wsUrl = 'ws://localhost:8000/ws';
    const ws = new WebSocket(wsUrl);
    
    // Step mapping for progress tracking
    const stepMapping = {
      'planning': 1,
      'sitemap': 2, 
      'architecture': 3,
      'backend': 4,
      'finalize': 4
    };
    
    const steps = loadingState?.querySelectorAll('.step-item');
    let currentStepIndex = -1;
    
    ws.onopen = () => {
      console.log('WebSocket connected');
    };
    
    ws.onmessage = (event) => {
      try {
        const progressData = JSON.parse(event.data);
        console.log('Progress update:', progressData);
        
        // Add message to callbacks
        if (aiCallbacks) {
          const messageDiv = document.createElement('div');
          messageDiv.className = 'opacity-0 transition-opacity duration-500';
          messageDiv.textContent = `> ${progressData.message}`;
          aiCallbacks.appendChild(messageDiv);
          
          // Fade in effect
          setTimeout(() => {
            messageDiv.classList.remove('opacity-0');
          }, 50);
          
          // Auto scroll to bottom
          aiCallbacks.scrollTop = aiCallbacks.scrollHeight;
        }
        
        // Update step progress
        const stepIndex = stepMapping[progressData.step];
        if (stepIndex && steps) {
          // Mark current step as active
          if (stepIndex - 1 !== currentStepIndex) {
            // Complete previous step
            if (currentStepIndex >= 0) {
              steps[currentStepIndex].classList.add('completed');
              steps[currentStepIndex].classList.remove('active');
            }
            
            // Activate current step  
            if (stepIndex - 1 < steps.length) {
              steps[stepIndex - 1].classList.add('active');
              currentStepIndex = stepIndex - 1;
            }
          }
          
          // Complete final step when done
          if (progressData.progress === 100) {
            if (currentStepIndex >= 0) {
              steps[currentStepIndex].classList.add('completed');
              steps[currentStepIndex].classList.remove('active');
            }
          }
        }
        
      } catch (error) {
        console.error('Error parsing progress data:', error);
      }
    };
    
    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
    
    ws.onclose = () => {
      console.log('WebSocket disconnected');
    };
    
    try {
      const response = await fetch('http://localhost:8000/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (response.ok) {
        const project = await response.json();
        
        // Wait a moment for final progress updates, then redirect
        setTimeout(() => {
          ws.close();
          window.location.href = `/project/${project.id}`;
        }, 2000);
      } else {
        console.error('Failed to create project');
        ws.close();
        // Reset form
        form.classList.remove('hidden');
        loadingState?.classList.add('hidden');
      }
    } catch (error) {
      console.error('Error creating project:', error);
      ws.close();
      // Reset form
      form.classList.remove('hidden');
      loadingState?.classList.add('hidden');
    }
  });
</script>