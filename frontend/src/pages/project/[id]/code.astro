---
import { API_BASE_URL } from "../../../config.ts";
import Layout from '../../../layouts/Layout.astro';

const { id } = Astro.params;

// Fetch project details
let project = null;
try {
  const response = await fetch(`${API_BASE_URL}/projects/${id}`);
  project = response.ok ? await response.json() : null;
} catch (error) {
  console.error('Failed to fetch project:', error);
}

if (!project) {
  return Astro.redirect('/');
}
---

<Layout title={`Code - ${project.name}`}>
  <div class="flex h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-[var(--bg-primary)] border-r border-[var(--border-primary)] p-6 flex flex-col">
      <a href="/" class="flex items-center gap-3 mb-8 transition-opacity group">
        <img src="/sitebuilder.png" alt="Architect Logo" class="h-8 w-8 object-contain" />
        <span class="font-mono text-sm transition-colors">Architect</span>
      </a>
      
      <div class="mb-8 pb-6 border-b border-white/10">
        <h2 class="font-antikor-title text-lg mb-1">{project.name}</h2>
        <p class="font-mono text-xs opacity-60">Project Dashboard</p>
      </div>
      
      <nav class="space-y-1 flex-1">
        <a href={`/project/${id}`} class="nav-item">
          <span>Overview</span>
        </a>
        <a href={`/project/${id}/sitemap`} class="nav-item">
          <span>Site Map</span>
        </a>
        <a href={`/project/${id}/architecture`} class="nav-item">
          <span>Frontend</span>
        </a>
        <a href={`/project/${id}/backend`} class="nav-item">
          <span>Backend</span>
        </a>
        <div class="border-t border-white/10 pt-4 mt-6">
          <a href={`/project/${id}/code`} class="nav-item nav-active w-full text-left">
            <span>Code</span>
          </a>
        </div>
      </nav>
      
      <div class="mt-auto pt-12 space-y-4">
        <button 
          id="project-details-btn"
          class="w-full px-4 py-2 font-mono text-sm bg-white/10 hover:bg-white/20 rounded-lg transition-colors"
        >
          Project Details
        </button>
        
        <div class="border-t border-white/10 pt-4">
          <p class="font-mono text-xs opacity-60">Created</p>
          <p class="font-mono text-xs">{new Date(project.created_at).toLocaleDateString()}</p>
        </div>
      </div>
    </aside>
    
    <!-- Main Content -->
    <main class="flex-1 flex flex-col bg-black">
      <!-- Code Header -->
      <div class="border-b border-white/20 p-8">
        <h1 class="font-antikor-title text-3xl mb-2">CODE</h1>
        <p class="font-mono text-sm opacity-60">AI Assistant for {project.name}</p>
      </div>
      
      <!-- Chat Messages -->
      <div class="flex-1 overflow-hidden">
        <div id="chat-messages" class="h-full overflow-y-auto">
          <div class="max-w-4xl mx-auto py-8">
            <!-- Initial AI Message -->
            <div class="mb-8">
              <div class="flex items-start gap-4 px-8">
                <img src="/sitebuilder.png" alt="Architect Logo" class="w-8 h-8 object-contain" />
                <div class="flex-1">
                  <div class="font-mono text-sm leading-relaxed">
                    Hello! I'm your AI assistant for "{project.name}". I can help you understand your project architecture, suggest improvements, answer questions about your site maps, frontend components, and backend design. What would you like to explore?
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Chat Input -->
      <div class="border-t border-white/20 bg-black">
        <div class="max-w-4xl mx-auto p-8">
          <div class="flex gap-4">
            <input
              type="text"
              id="chat-input"
              placeholder="Message AI assistant..."
              class="flex-1 px-4 py-3 bg-white/5 border border-white/20 rounded-lg font-mono text-sm text-white placeholder-white/60 focus:border-white/40 focus:outline-none transition-colors"
            />
            <button
              id="send-chat-btn"
              class="px-6 py-3 bg-white text-black rounded-lg font-mono text-sm font-medium transition-colors hover:bg-white/90"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <!-- Project Details Modal -->
  <div id="project-modal" class="fixed inset-0 bg-black/90 backdrop-blur-sm hidden z-50">
    <div class="flex items-center justify-center h-full p-8">
      <div class="bg-black border border-white/20 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <!-- Modal Header -->
        <div class="border-b border-white/10 p-6">
          <div class="flex justify-between items-start">
            <div>
              <h2 class="font-mono text-2xl mb-2">{project.name}</h2>
              <p class="font-mono text-sm opacity-60">
                Created on {new Date(project.created_at).toLocaleDateString('en-US', {
                  weekday: 'long',
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </p>
            </div>
            <button 
              id="close-modal-btn"
              class="text-white/60 hover:text-white text-2xl font-mono leading-none"
            >
              Ã—
            </button>
          </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6 overflow-y-auto max-h-[60vh]">
          <div class="space-y-6">
            <div>
              <h3 class="font-mono text-sm text-white/60 mb-3">Project Description</h3>
              <div class="font-mono text-sm leading-relaxed whitespace-pre-wrap">{project.description}</div>
            </div>
          </div>
        </div>
        
        <!-- Modal Footer -->
        <div class="border-t border-white/10 p-6">
          <div class="flex justify-between items-center">
            <p class="font-mono text-xs opacity-60">
              Project ID: <span class="opacity-100">{project.id}</span>
            </p>
            <button 
              id="delete-project-btn"
              data-project-id={id}
              class="px-6 py-2 font-mono text-sm bg-red-600/20 hover:bg-red-600/30 text-red-400 rounded-lg transition-colors"
            >
              Delete Project
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const deleteBtn = document.getElementById('delete-project-btn');
    const projectDetailsBtn = document.getElementById('project-details-btn');
    const projectModal = document.getElementById('project-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const chatInput = document.getElementById('chat-input');
    const sendChatBtn = document.getElementById('send-chat-btn');
    const chatMessages = document.getElementById('chat-messages');

    // Open modal
    projectDetailsBtn?.addEventListener('click', () => {
      projectModal?.classList.remove('hidden');
    });

    // Close modal
    closeModalBtn?.addEventListener('click', () => {
      projectModal?.classList.add('hidden');
    });

    // Close modal when clicking outside
    projectModal?.addEventListener('click', (e) => {
      if (e.target === projectModal) {
        projectModal.classList.add('hidden');
      }
    });

    // Delete project
    deleteBtn?.addEventListener('click', async (e) => {
      const projectId = (e.target as HTMLElement).dataset.projectId;
      
      if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
        try {
          const response = await fetch(`http://localhost:8000/projects/${projectId}`, {
            method: 'DELETE',
          });
          
          if (response.ok) {
            window.location.href = '/';
          } else {
            console.error('Failed to delete project');
            alert('Failed to delete project. Please try again.');
          }
        } catch (error) {
          console.error('Error deleting project:', error);
          alert('Error deleting project. Please try again.');
        }
      }
    });

    // Send message function
    function sendMessage() {
      const message = chatInput?.value.trim();
      if (!message) return;

      // Get the messages container
      const messagesContainer = chatMessages?.querySelector('.max-w-4xl');
      if (!messagesContainer) return;

      // Add user message
      const userMessageDiv = document.createElement('div');
      userMessageDiv.className = 'mb-8';
      userMessageDiv.innerHTML = `
        <div class="flex items-start gap-4 px-8">
          <div class="w-8 h-8 bg-white/10 border border-white/20 rounded-full flex items-center justify-center font-mono text-xs">
            You
          </div>
          <div class="flex-1">
            <div class="font-mono text-sm leading-relaxed">${message}</div>
          </div>
        </div>
      `;
      
      messagesContainer.appendChild(userMessageDiv);
      chatInput.value = '';

      // Add AI response (mock for now)
      setTimeout(() => {
        const aiMessageDiv = document.createElement('div');
        aiMessageDiv.className = 'mb-8';
        aiMessageDiv.innerHTML = `
          <div class="flex items-start gap-4 px-8">
            <img src="/sitebuilder.png" alt="Architect Logo" class="w-8 h-8 object-contain" />
            <div class="flex-1">
              <div class="font-mono text-sm leading-relaxed">Great question! I'm currently a frontend-only demo, but in a full implementation, I would analyze your project architecture, suggest improvements, and help you understand the relationships between your site maps, frontend components, and backend design. I could help you optimize your project structure and identify potential issues or enhancements.</div>
            </div>
          </div>
        `;
        
        messagesContainer.appendChild(aiMessageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }, 1000);

      // Auto scroll to bottom
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Send message on button click
    sendChatBtn?.addEventListener('click', sendMessage);

    // Send message on Enter key
    chatInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
  });
</script>

<style>
  /* Enhanced navigation styles */
  .nav-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    font-family: 'TG Frekuent Mono', monospace;
    font-size: 0.875rem;
    text-decoration: none;
    color: rgba(255, 255, 255, 0.7);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }

  .nav-item:focus {
    background-color: rgba(255, 255, 255, 0.05);
    color: rgba(255, 255, 255, 0.9);
    border-color: rgba(255, 255, 255, 0.1);
  }

  .nav-active {
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
    border-color: rgba(255, 255, 255, 0.2);
  }
</style>